// #include <Arduino.h>
// #include "esp_adc_cal.h" // 👈 اضافه کن

// #pragma region define variables
// HardwareSerial SIM808(1);
// const int SIM808_RX = 16;
// const int SIM808_TX = 17;
// const int AllarmLedPin = 2;
// const int AllarmBuzzerPin = 2;
// int systemStatus = 1; // 1=>arm , 2 disarm , 3 halfArm
// int smsStatus = 1;    // 1=>send , 0=> not send
// String latitude = "";
// String longitude = "";
// String adminMobileNumber = "+989368054055";
// String allowedNumbers[] = {adminMobileNumber};
// bool simIsOnline = false;
// const int allowedCount = sizeof(allowedNumbers) / sizeof(allowedNumbers[0]);
// String smsBuffer = "";
// unsigned long lastSmsCheck = 0;
// const unsigned long smsTimeout = 3000;           // زمان بررسی پیامک‌ها
// const unsigned long PIR_DETECTION_WINDOW = 2000; // بازه‌ی ۱ ثانیه
// const int PIR_REQUIRED_COUNT = 2;                // تعداد تحریک لازم در بازه
// const int PIR_LOOP_DELAY = 100;                  // صبر در انتهای هر دور (میلی‌ثانیه)
// volatile bool motionDetectedPublic = false;
// volatile bool SentTrigSmsNotFinish = false;

// enum SmsState
// {
//   SMS_IDLE,
//   SMS_INIT,
//   SMS_SEND_HEADER,
//   SMS_SEND_BODY,
//   SMS_SEND_CTRLZ,
//   SMS_WAIT_RESPONSE
// };

// struct SmsMessage
// {
//   String number;
//   String text;
//   int priority; // 0 = بالا، 1 = متوسط، 2 = پایین
//   unsigned long timestamp;
// };
// SmsState smsState = SMS_IDLE;
// unsigned long smsTimer = 0;
// int currentPriority = -1;
// SmsMessage currentMessage;
// struct PirSensor
// {
//   int pin;
//   String name;
//   bool isAnalog;
//   unsigned long windowStart;
//   int motionCount;
//   bool motionDetected;

//   // // برای EMA
//   // float emaValue;
//   // bool emaInitialized;

//   PirSensor()
//       : pin(-1), name(""), isAnalog(false),
//         windowStart(0), motionCount(0), motionDetected(false) {}

//   PirSensor(int p, const char *n, bool analog = false)
//       : pin(p), name(String(n)), isAnalog(analog),
//         windowStart(0), motionCount(0), motionDetected(false) {}
// };

// const int SMS_QUEUE_SIZE = 50;
// SmsMessage smsQueues[3][SMS_QUEUE_SIZE]; // سه صف برای سه اولویت
// int smsQueueHead[3] = {0, 0, 0};
// int smsQueueTail[3] = {0, 0, 0};

// PirSensor sensors[] = {
//     PirSensor(23, " sensor ofoghi ")};
// const int sensorCount = sizeof(sensors) / sizeof(sensors[0]);

// struct IncomingSms
// {
//   String sender;
//   String text;
// };

// const int INCOMING_SMS_QUEUE_SIZE = 5;
// IncomingSms incomingSmsQueue[INCOMING_SMS_QUEUE_SIZE];
// int incomingSmsHead = 0;
// int incomingSmsTail = 0;

// enum SmsReceiveState
// {
//   SMS_RX_IDLE,
//   SMS_RX_WAITING,
//   SMS_RX_READING
// };

// SmsReceiveState smsRxState = SMS_RX_IDLE;
// String smsRxBuffer = "";
// unsigned long smsRxStart = 0;
// unsigned long smsRxLastReceive = 0;

// #pragma endregion

// #pragma region functions signature
// bool SenAtCommanSim808(String command, String expectedResponse, int timeout);
// void SetupSim();
// String sendSms(String number, String msg);
// bool getGpsLocation();
// void compileSms(String smsText, String num);
// bool PirIsTrige(PirSensor &sensor);
// void Allarm(int blinkCountPerLoop, int blinkDelayMs, int loopCount, int loopPauseMs);
// void AlarmTask(void *param);
// void CheckSensorsTask();
// bool isAuthorizedNumber(String num);
// void SmsSender();
// #pragma endregion
// void TaskDelay(int delay)
// {
//   String t = String(delay);
//   Serial.println("delay for :  " + t + "  ms");
//   vTaskDelay(delay);
// }
// bool isAuthorizedNumber(String num)
// {
//   for (int i = 0; i < allowedCount; i++)
//   {
//     if (allowedNumbers[i] == num)
//     {
//       return true;
//     }
//   }
//   return false;
// }

// String SmsTextGenerator(String sensorName, String msg)
// {
//   String result = "trig sensor : " + sensorName + " " + msg;
//   return result;
// }

// String ReportSmsTextGenerator(String senderNumber, String msg)
// {
//   String result = "sender number : " + senderNumber + " ---msg--- " + msg;
//   return result;
// }

// bool enqueueSms(String number, String text, int priority)
// {
//   if (priority < 0 || priority > 2)
//     return false;

//   int nextTail = (smsQueueTail[priority] + 1) % SMS_QUEUE_SIZE;

//   smsQueues[priority][smsQueueTail[priority]] = {number, text, priority, millis()};
//   smsQueueTail[priority] = nextTail;
//   return true;
// }

// bool SenAtCommanSim808(String command, String expectedResponse, int timeout)
// {
//   Serial.print("Sending command: ");
//   Serial.println(command);

//   SIM808.flush();          // پاک‌سازی بافر
//   SIM808.println(command); // ارسال دستور

//   unsigned long startTime = millis();
//   String fullResponse = "";

//   while (millis() - startTime < timeout)
//   {
//     if (SIM808.available())
//     {
//       String line = SIM808.readStringUntil('\n');
//       line.trim(); // حذف فاصله‌ها و کاراکترهای اضافی

//       if (line.length() > 0)
//       {
//         Serial.println("Received line: " + line);
//         fullResponse += line;

//         if (fullResponse.indexOf(expectedResponse) != -1)
//         {
//           Serial.println("✅ Command executed successfully.");
//           TaskDelay(100);
//           return true;
//         }
//       }
//     }
//   }

//   Serial.println("❌ Failed to execute command: " + command);
//   return false;
// }
// void SetupSim()
// {
//   SIM808.begin(9600, SERIAL_8N1, SIM808_RX, SIM808_TX);
//   TaskDelay(5000);

//   Serial.println("Initializing SIM808...");

//   if (!SenAtCommanSim808("AT", "OK", 1000))
//     return;
//   // فعال کردن GPS
//   if (!SenAtCommanSim808("AT+CGNSPWR=1", "OK", 2000))
//     return; // روشن کردن GPS
//   TaskDelay(2000);
//   if (!SenAtCommanSim808("AT+CGNSSEQ=RMC", "OK", 2000))
//     return; // مشخص کردن نوع داده GPS

//   if (!SenAtCommanSim808("AT+CGNSINF", "OK", 2000))
//     return; // بررسی وضعیت GPS

//   if (!SenAtCommanSim808("ATE0", "OK", 1000))
//     return; // خاموش کردن Echo برای تمیز بودن خروجی

//   if (!SenAtCommanSim808("AT+CPIN?", "READY", 2000))
//     return; // بررسی سیم‌کارت

//   if (!SenAtCommanSim808("AT+CREG?", "0,1", 3000))
//     return; // بررسی ثبت در شبکه
//   if (!SenAtCommanSim808("AT+CSQ", "OK", 1000))
//     return; // بررسی قدرت سیگنال (اختیاری ولی مفید)

//   // تنظیمات SMS
//   if (!SenAtCommanSim808("AT+CMGF=1", "OK", 1000))
//     return; // حالت TEXT
//   if (!SenAtCommanSim808("AT+CNMI=2,2,0,0,0", "OK", 1000))
//     return; // نمایش مستقیم پیام‌ها

//   Serial.println("✅ SIM808 Initialized Successfully!");
//   simIsOnline = true;
// }

// bool PirIsTrige(PirSensor &sensor)
// {
//   unsigned long now = millis();
//   int pirState = digitalRead(sensor.pin);

//   if (sensor.motionCount == 0)
//   {
//     sensor.windowStart = now;
//   }
//   // اگر تحریک شد
//   if (pirState == HIGH)
//   {
//     Serial.println("PirIsTrige ===>>>   Sensor " + sensor.name + " triggered | Count: " + String(sensor.motionCount));

//     // اگر پنجره‌ی زمانی تموم شده باشه، شمارنده صفر بشه و پنجره جدید شروع بشه
//     if (now - sensor.windowStart > PIR_DETECTION_WINDOW)
//     {
//       sensor.windowStart = now;
//       sensor.motionCount = 1;
//     }
//     else
//     {
//       sensor.motionCount++;
//     }

//     sensor.motionDetected = true;

//     // اگر تعداد تحریک‌ها کافی بود
//     if (sensor.motionCount >= PIR_REQUIRED_COUNT)
//     {
//       Serial.println("✅ Motion confirmed for sensor: " + sensor.name +
//                      " | Count: " + String(sensor.motionCount) +
//                      " / Required: " + String(PIR_REQUIRED_COUNT));

//       // ریست شمارنده و شروع پنجره جدید
//       sensor.motionCount = 0;
//       sensor.windowStart = now;
//       sensor.motionDetected = false;

//       return true;
//     }
//   }
//   else
//   {
//     Serial.println("PirIsTrige ===>>>   Sensor " + sensor.name + "        in else block.....................");
//     // اگر تحریک نبود
//     sensor.motionDetected = false;

//     // اگر پنجره‌ی زمانی تموم شده باشه، شمارنده صفر بشه
//     if (now - sensor.windowStart > PIR_DETECTION_WINDOW)
//     {
//       sensor.windowStart = now;
//       sensor.motionCount = 0;
//     }
//   }

//   return false;
// }

// void CheckSensorsTask()
// {
//   if (systemStatus != 1)
//     return; // اگر سیستم فعال نیست، خروج

//   SentTrigSmsNotFinish = false;

//   for (int i = 0; i < sensorCount; i++)
//   {
//     PirSensor &sensor = sensors[i];

//     if (PirIsTrige(sensor))
//     {
//       Serial.println("✅ Triggered: " + sensor.name + " → Sending SMS");

//       motionDetectedPublic = true;
//       SentTrigSmsNotFinish = true;

//       for (int j = 0; j < allowedCount; j++)
//       {
//         String message = "Motion detected on sensor: " + sensor.name;
//         Serial.println("Sending SMS to: " + allowedNumbers[j] + " | Text: " + message);
//         enqueueSms(allowedNumbers[j], message, 2);
//       }
//     }
//     else
//     {
//       motionDetectedPublic = false;
//     }
//   }
// }
// bool isGpsOn()
// {
//   SenAtCommanSim808("AT+CGNSPWR?", "OK", 1000);
//   unsigned long start = millis();
//   String resp = "";
//   while (millis() - start < 1000)
//   {
//     while (SIM808.available())
//     {
//       char c = SIM808.read();
//       resp += c;
//     }
//   }
//   resp.trim();
//   // اگر مقدار بعد از +CGNSPWR: 1 بود یعنی روشن است
//   int idx = resp.indexOf("+CGNSPWR:");
//   if (idx != -1)
//   {
//     String val = resp.substring(idx + 9); // بعد از +CGNSPWR:
//     val.trim();
//     if (val.startsWith("1"))
//     {
//       Serial.println("gps power on success... resp : " + resp + "-------  idx  " + idx);
//       return true;
//     }
//   }
//   Serial.println("gps power on failed... resp : " + resp + "-------  idx  " + idx);

//   return false;
// }

// bool getGpsLocation()
// {
//   if (!isGpsOn())
//   {
//     SenAtCommanSim808("AT+CGNSPWR=1", "OK", 1000);
//     TaskDelay(1000); // اجازه بده روشن شود
//   }

//   Serial.println("getGpsLocation()");
//   SenAtCommanSim808("AT+CGNSINF", "OK", 1000);

//   TaskDelay(150); // اجازه برای پاسخ

//   unsigned long start = millis();
//   String fullResp = "";

//   // خواندن کل پاسخ (تا timeout)
//   while (millis() - start < 3000)
//   {
//     while (SIM808.available())
//     {
//       char c = SIM808.read();
//       fullResp += c;
//     }
//   }
//   Serial.println("fullResp>>>>    " + fullResp);

//   int p = fullResp.indexOf("+CGNSINF:");
//   if (p == -1)
//     return false;

//   Serial.println("getGpsLocation1>>>>    " + p);
//   // payload بعد از :
//   int col = fullResp.indexOf(':', p);
//   if (col == -1)
//     return false;
//   String payload = fullResp.substring(col + 1);
//   payload.trim();

//   // helper برای گرفتن n-امین توکن (بعد از جداکننده ,)
//   auto getToken = [&](int n) -> String
//   {
//     int startIdx = 0;
//     for (int i = 0; i < n; ++i)
//     {
//       int nextComma = payload.indexOf(',', startIdx);
//       if (nextComma == -1)
//         return String("");
//       startIdx = nextComma + 1;
//     }
//     int endIdx = payload.indexOf(',', startIdx);
//     if (endIdx == -1)
//       endIdx = payload.length();
//     String t = payload.substring(startIdx, endIdx);
//     t.trim();
//     return t;
//   };

//   String runStatus = getToken(0); // 0
//   String fixStatus = getToken(1); // 1 -> 1 means fixed
//   String utcTime = getToken(2);   // 2
//   String latStr = getToken(3);    // 3 -> latitude
//   String lonStr = getToken(4);    // 4 -> longitude

//   if (fixStatus == "1" && latStr.length() > 2 && lonStr.length() > 2 && latStr != "0.000000" && lonStr != "0.000000")
//   {
//     latitude = latStr;
//     longitude = lonStr;
//     Serial.println("Google Maps: https://maps.google.com/?q=" + latitude + "," + longitude);
//     return true;
//   }

//   Serial.println("⚠️ GPS not fixed yet!");
//   return false;
// }

// String sendSms(String number, String msg)
// {
//   if (smsStatus == 0)
//     return "false";

//   if (!simIsOnline)
//   {
//     SetupSim();
//   }
//   String txt = "Sending SMS... to " + number + "msg :    " + msg;
//   Serial.println();

//   if (!SenAtCommanSim808("AT+CMGF=1", "OK", 1000))
//   {
//     Serial.println("init failed, reinitializing SIM...");
//     simIsOnline = false;
//     SetupSim();
//     if (!simIsOnline || !SenAtCommanSim808("AT+CMGF=1", "OK", 1000))
//       return "false";
//   }

//   // ارسال دستور شروع پیامک
//   SIM808.print("AT+CMGS=\"");
//   SIM808.print(number); // شماره مقصد
//   SIM808.println("\"");
//   TaskDelay(100); // زمان انتظار برای پاسخ

//   // ارسال متن پیامک
//   SIM808.print(msg);
//   TaskDelay(100);

//   // ارسال Ctrl+Z برای ارسال پیام
//   SIM808.write(26);
//   TaskDelay(3000); // زمان کافی برای ارسال پیامک

//   Serial.print(" SMS sent.... : : :     ");
//   Serial.println(txt);
//   return "true";
// }

// void SmsSender()
// {
//   int selectedPriority = -1;
//   int selectedIndex = -1;
//   unsigned long oldestTime = ULONG_MAX;

//   if (smsState == SMS_IDLE)
//   {
//     // پیدا کردن قدیمی‌ترین پیام با اولویت بالا
//     for (int p = 0; p < 3; p++)
//     {
//       int head = smsQueueHead[p];
//       int tail = smsQueueTail[p];

//       while (head != tail)
//       {
//         SmsMessage &msg = smsQueues[p][head];
//         if (msg.timestamp < oldestTime)
//         {
//           oldestTime = msg.timestamp;
//           selectedPriority = p;
//           selectedIndex = head;
//         }
//         head = (head + 1) % SMS_QUEUE_SIZE;
//       }
//     }

//     // اگر پیام پیدا شد، آماده‌سازی برای ارسال
//     if (selectedIndex != -1)
//     {
//       currentPriority = selectedPriority;
//       currentMessage = smsQueues[selectedPriority][selectedIndex];
//       smsQueueHead[selectedPriority] = (selectedIndex + 1) % SMS_QUEUE_SIZE;
//       smsState = SMS_INIT;
//       smsTimer = millis();
//       return;
//     }

//     return; // هیچ پیامکی در صف نیست
//   }

//   switch (smsState)
//   {
//   case SMS_INIT:
//     SIM808.println("AT+CMGF=1");
//     smsState = SMS_SEND_HEADER;
//     smsTimer = millis();
//     break;

//   case SMS_SEND_HEADER:
//     if (millis() - smsTimer > 500)
//     {
//       SIM808.print("AT+CMGS=\"");
//       SIM808.print(currentMessage.number);
//       SIM808.println("\"");
//       smsState = SMS_SEND_BODY;
//       smsTimer = millis();
//     }
//     break;

//   case SMS_SEND_BODY:
//     if (millis() - smsTimer > 500)
//     {
//       SIM808.print(currentMessage.text);
//       smsState = SMS_SEND_CTRLZ;
//       smsTimer = millis();
//     }
//     break;

//   case SMS_SEND_CTRLZ:
//     if (millis() - smsTimer > 500)
//     {
//       SIM808.write(26); // Ctrl+Z
//       smsState = SMS_WAIT_RESPONSE;
//       smsTimer = millis();
//     }
//     break;

//   case SMS_WAIT_RESPONSE:
//     if (millis() - smsTimer > 3000)
//     {
//       Serial.printf("📩 SMS sent to %s: %s\n",
//                     currentMessage.number.c_str(),
//                     currentMessage.text.c_str());

//       smsState = SMS_IDLE;
//       currentPriority = -1;
//     }
//     break;
//   }
// }

// void monitorInputSmsStateMachine()
// {
//   switch (smsRxState)
//   {
//   case SMS_RX_IDLE:
//     if (SIM808.available())
//     {
//       smsRxBuffer = "";
//       smsRxStart = millis();
//       smsRxLastReceive = millis();
//       smsRxState = SMS_RX_READING;
//     }
//     break;

//   case SMS_RX_READING:
//     while (SIM808.available())
//     {
//       char c = SIM808.read();
//       smsRxBuffer += c;
//       smsRxLastReceive = millis();
//     }

//     // اگر 500ms از آخرین دریافت گذشته، فرض کن پیامک کامل شده
//     if (millis() - smsRxLastReceive > 500 && smsRxBuffer.length() > 0)
//     {
//       smsRxState = SMS_RX_WAITING;
//     }
//     break;

//   case SMS_RX_WAITING:
//     if (smsRxBuffer.indexOf("+CMT:") != -1)
//     {
//       // استخراج شماره فرستنده
//       String sender = "";
//       int q1 = smsRxBuffer.indexOf("\"");
//       int q2 = smsRxBuffer.indexOf("\"", q1 + 1);
//       if (q1 != -1 && q2 != -1)
//       {
//         sender = smsRxBuffer.substring(q1 + 1, q2);
//       }

//       // استخراج متن پیامک
//       String text = "";
//       int lastQuote = smsRxBuffer.lastIndexOf("\"");
//       if (lastQuote != -1 && lastQuote + 1 < smsRxBuffer.length())
//       {
//         text = smsRxBuffer.substring(lastQuote + 1);
//       }

//       text.replace("\r", "");
//       text.replace("\n", "");
//       text.trim();

//       // پاکسازی کاراکترهای خراب
//       for (int i = 0; i < text.length(); i++)
//       {
//         if (text[i] < 32 || text[i] > 126)
//         {
//           text[i] = ' ';
//         }
//       }

//       // اضافه به صف
//       int nextTail = (incomingSmsTail + 1) % INCOMING_SMS_QUEUE_SIZE;
//       if (nextTail != incomingSmsHead)
//       {
//         incomingSmsQueue[incomingSmsTail] = {sender, text};
//         incomingSmsTail = nextTail;
//         Serial.println("📥 SMS queued from " + sender + ": " + text);
//       }
//       else
//       {
//         Serial.println("⚠️ Incoming SMS queue full. Message dropped.");
//       }
//     }

//     smsRxState = SMS_RX_IDLE;
//     break;
//   }
// }
// void processIncomingSmsQueue()
// {
//   if (incomingSmsHead != incomingSmsTail)
//   {
//     IncomingSms msg = incomingSmsQueue[incomingSmsHead];
//     incomingSmsHead = (incomingSmsHead + 1) % INCOMING_SMS_QUEUE_SIZE;

//     // پردازش پیامک
//     enqueueSms(adminMobileNumber, ReportSmsTextGenerator(msg.sender, msg.text), 0);
//     compileSms(msg.text, msg.sender);
//   }
// }

// void compileSms(String smsText, String num)
// {
//   if (!isAuthorizedNumber(num))
//   {
//     if (num.startsWith("989"))
//     {
//       enqueueSms(num, "access denied", 0);

//       Serial.println("⛔ access denied " + num);
//       return;
//     }
//   }

//   smsText.toLowerCase();
//   smsText.trim();

//   if (smsText == "gps")
//   {
//     Serial.println("📨 Command received: GPS");

//     if (getGpsLocation())
//     {
//       String link = "https://maps.google.com/?q=" + latitude + "," + longitude;
//       enqueueSms(num, link, 1); // شماره دلخواه
//     }
//     else
//     {
//       enqueueSms(num, "GPS not ready", 1); // شماره دلخواه
//     }
//   }
//   else if (smsText == "disarm")
//   {
//     systemStatus = 2;
//     enqueueSms(num, "system is disarm", 1);
//     enqueueSms(adminMobileNumber, "system is disarm for user : " + num, 1);
//   }
//   else if (smsText == "arm")
//   {
//     systemStatus = 1;
//     enqueueSms(num, "system is arm", 1);
//     enqueueSms(adminMobileNumber, "system is arm for user : " + num, 1);
//   }
//   else if (smsText == "smson")
//   {
//     smsStatus = 1;
//     enqueueSms(num, "system sms is on", 1);
//     enqueueSms(adminMobileNumber, "system sms is on ,  user : " + num, 1);
//   }
//   else if (smsText == "smsoff")
//   {
//     smsStatus = 0;
//     enqueueSms(num, "system sms is off", 1);
//     enqueueSms(adminMobileNumber, "system sms is off ,  user : " + num, 1);
//   }
//   else
//   {
//     Serial.println("📨 Unknown command: " + smsText);
//   }
// }

// esp_adc_cal_characteristics_t adc_chars;
// void setup()
// {

//   SIM808.begin(9600, SERIAL_8N1, SIM808_RX, SIM808_TX);
//   delay(3000);

//   Serial.begin(9600);
//   // کانفیگ ADC
//   analogSetPinAttenuation(34, ADC_11db); // تا 3.3V
//   analogSetWidth(12);                    // 12-bit

//   // characterize با مقدار پیش‌فرض Vref (میلی‌ولت)
//   esp_adc_cal_characterize(ADC_UNIT_1, ADC_ATTEN_DB_11, ADC_WIDTH_BIT_12, 1100, &adc_chars);

//   // پین‌ها
//   pinMode(34, INPUT);          // آنالوگ (ورودی-تنها OK)
//   pinMode(21, INPUT);          // دیجیتال عادی
//   pinMode(22, INPUT_PULLDOWN); // دیجیتال با PullDown
//   pinMode(23, INPUT_PULLUP);   // دیجیتال با PullUp

//   Serial.println("Ready...");

//   // esp_adc_cal_characterize(ADC_UNIT_1, ADC_ATTEN_DB_11, ADC_WIDTH_BIT_12, 1100, &adc_chars);

//   // SenAtCommanSim808("AT", "OK", 3000);

//   // Serial.begin(9600);

//   // for (int i = 0; i < sensorCount; i++)
//   // {
//   //   pinMode(sensors[i].pin, INPUT);
//   // }
//   // pinMode(34, INPUT);
//   // pinMode(AllarmBuzzerPin, OUTPUT);
//   // pinMode(AllarmLedPin, OUTPUT);

//   // Serial.println(" device setup sim  .....................  start");

//   // SetupSim();

//   // enqueueSms("+989368054055", "device setup done ", 1);
// }

// void loop()
// {
//   // خواندن دیجیتال‌ها
//   int d21 = digitalRead(21);

//   // pinMode(21, OUTPUT);
//   // digitalWrite(21, LOW);
//   // delay(50);                 // 50 میلی‌ثانیه کافی است
//   // pinMode(21, INPUT); // دوباره به حالت ورودی برای سنسور

//   // لاگ یک‌خطی
//   Serial.printf(" (vref: %u mV) , D21:%d ,  \n",
//                 (unsigned)adc_chars.vref, d21);

//   if (d21 == 1)
//   {
//     // ریست نرم‌افزاری خروجی
//     pinMode(21, INPUT_PULLDOWN); // آزاد شدن پین
//     delay(50);                          // چند میلی‌ثانیه کوتاه
//     pinMode(21, INPUT);          // بازگشت به حالت اولیه
//   }

//   delay(500);

//   // CheckSensorsTask();
//   // if (motionDetectedPublic)
//   // {
//   //   Serial.println("***********************************************       allarm on");
//   //   // آژیر روشن
//   //   digitalWrite(AllarmBuzzerPin, HIGH);
//   //   digitalWrite(AllarmLedPin, HIGH);
//   // }
//   // else
//   // {
//   //   // آژیر خاموش
//   //   digitalWrite(AllarmBuzzerPin, LOW);
//   //   digitalWrite(AllarmLedPin, LOW);
//   // }
//   // SmsSender();
//   // monitorInputSmsStateMachine(); // دریافت پیامک بدون بلاک شدن
//   // processIncomingSmsQueue();     // پردازش پیامک‌ها با تأخیر
//   // getGpsLocation();
// }
